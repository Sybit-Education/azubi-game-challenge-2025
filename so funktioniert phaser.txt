So funktioniert dieses Phaser Projekt:

Der Code startet in src/main.ts. Und zwar wenn DOMContentLoaded geladen worden ist. Diese führt dann StartGame() aus.
Diese Methode erstellt dann eine neue Gameinstanz, mit der Config in der gleichen Datei.
Die Scene ganz oben wird automatisch geladen. Und zwar Boot. In dieser Datei werden dann Assets geladen, die man immer braucht und die sich nicht ändern. Logo zum Beispiel.
Wenn dieser fertig ist, wird ein preloader gestartet. Dieser läd dann alle theme bezogen Assets. Wir haben zwar keine Themes ist, können es jetzt aber einfach implementieren...
Wenn dieser auch fertig ist, started er die start() methode. Diese schickt dich aktuell nur in den Start Screen. Das Laden von jeder restlichen Scenen (die befinden sich dann in dem scenes ordner befinden) ist immer gleich.
Und zwar gibt es in Scene mehrere Methoden. Klar man kann eigne erstellen aber bestimmte sind vorbestimmt, das sind folgende. Diese werden automatisch aufgerufen und erfüllen eigentlich immer einen bestimmten zweck
  - init - Szene wird gestartet - am besten für vorbereitungen
  - preload - Szene wird geladen und damit der beste Zeitpunkt um assets zu laden (festgellegt werden diese in src/game/scenes/Boot.ts)
  - create - Szene initialisiert Display-Objekte, setzt Eingaben auf, erstellt physikalische Objekte etc. Jetzt ist sie bereit zu laufen.
  - update - Wenn create fertig geladen ist, läuft diese Methode bei jedem Frame. Gut für logic, input & animationen (kann sein das ich, was vergessem hab)
  - es gibt auch noch mehr wie shutdown aber ich glaube, die brauchen wir grad ned und das wär jetzt auch zu viel.


So funktioniert das Backend:

Der server startet, wenn die server/server.ts Datei ausgeführt wird. In dieser Datei gibt, es mehre Sektionen:
  - Varibles - Dies sind einfach varablen
  - Config - Dies sind Variablend die einfach angepasst werden können
  - Start section - In dieser sektion werden die verschiednen Systeme gestartet. Aktuell ist es eh nur das Leaderboard.
  - Listen - Der Server öffnet den Port und ist somit bereit und online.
